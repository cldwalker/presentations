#+TITLE: AWS Elasticache
#+AUTHOR: Gabriel Horner
#+EMAIL: gabriel@cognitect.com

* AWS ElastiCache Briefing                                            :slide:
* Choosing to use
** What is it?                                                        :slide:
- Amazon ElastiCache is a web service that provides an
  in-memory cache for your AWS application.
- This cache is a scalable cluster of Memcached or Redis protocol-compliant
  server nodes.
- This service has a number of features to streamline the
  management, monitoring and operation of these nodes.
*** Notes                                                             :notes:

- Amazon ElastiCache is protocol-compliant with Memcached and Redis,
  so applications that already use another existing Memcached or Redis
  environment can work seamlessly with this service
** What problems does ElastiCache strive to solve?                    :slide:
- Problem 1: Building a caching cluster requires
  provisioning a server, installing caching software and knowledge of
  how to setup a cluster.
- Problem 2: Operating a caching cluster requires configuring it,
  understanding and mitigating its failure modes, updating software,
  backups (if possible) and more.
- Problem 3: Monitoring a caching cluster requires gathering a cluster's
  metrics and having a useful way of interpreting them.
- Problem 4: Automate all of the above to make a scalable, elastic
  and fault-tolerant cluster.
*** Notes                                                             :notes:
- p2: backups only for redis
- p2: configuring it is not a solved problem but hopefully one that
  starts out with more desirable defaults
- p3: i.e. a visual way perhaps a dashboard
- p3: you also need to understand how to take action on those metrics
- p4: fault-tolerant here means being able to lose a node and have one
  automatically take its place.
** Fundamental semantics
*** What is it 'about'?                                              :slide:
ElastiCache aims to be an easy way of adding a reliable, scalable and
managed caching layer to your AWS app.
TODO - preface with slideshare diagram
*** What are the primary operations?                                   :slide:
- Create, edit, reboot and delete cache clusters
- Create, edit, promote and delete Redis replication groups
- Create, edit, list and reset cache parameter groups
- Create, edit, assign/authorize and delete cache security groups and subnet groups
- Create, show, copy, delete and restore Redis snapshots
**** Notes                                                            :notes:
There's 34 actions in all
*** Is it simple?                                                    :slide:
Theoretically yes - it's just a FewClicks™ caching but ...
- There are a number of moving parts and even more operations
- Different node types can impact throughput, latency.
- Different configurations can impact reliability, durability, elasticity.
- Grouping Redis and Memcached works until it doesn't.

So /NO/
**** Notes                                                            :notes:
- configuration, node types and redis/memcached disconnect can make it hard to reason about
- redis and memcached have different concepts and features
- redis has replication and backup. memcached has auto-discovery.
- redis can be durable
- Grouping the two can be confusing as one concept may not apply to
  another i.e. replication and some limits don't apply to others i.e.
  node limit per cluster
** Architectural overview
*** Key components                                                    :slide:
- engine: Redis or Memcached
- node: Smallest building block with its own DNS name and port
- cluster: Group of nodes with the same engine type
- cache parameter group: Group of parameters to be associated with a
  cluster
- cache security group: Controls network access to public cluster
- cache subnet group: Controls network access to private cluster
- Redis replication group: One primary/write cluster and up to five read clusters
**** Notes                                                            :notes:
- node runs an instance of memcached/redis
- only one node per cluster 
*** Key components (cont)                                             :slide:
[[file:img/elasticache_components.png]]
*** Key features/functions                                            :slide:
- Provision and operation of clusters of Memcached/Redis nodes
- Detailed monitoring statistics of nodes via Cloudwatch
- Failed nodes are automatically detected and replaced
- Auto discovery of Memcached nodes
- Backup and restore for Redis nodes
- Replication groups for Redis
- Full integration with VPC
- Accessible from AWS Console, API or CLI
**** Notes                                                            :notes:
- Auto-discovery works by having an endpoint which is in charge of
  registering nodes
- Auto-discovery requires an additional client for this functionality.
  Amazon supports Java and PHP by default.
- Backups are made to s3. Backups can be done manually or automatic.
  Snapshot mechanism can be used to migrate a Redis cache to ElastiCache
- Redis replication - ability to replace primary within a group
** Key indicators for use                                             :slide:
- Your app, db or caching target is on AWS
- You want to use Redis or Memcached
- Your cache needs are large enough to require a caching cluster i.e.
 in the GB range
*** Notes                                                             :notes:
- Cache sizes go from standard small (1.3GB) to enhanced xxlarge (29GB)
** Key indicators against use                                         :slide:
- Inverse of the indicators for use
- Have differing opinions on Redis and security, backups or security
- You want to use unsupported versions of Redis or Memcached
*** Notes                                                             :notes:
ElastiCache handles the above Redis topics for you so it's only a
problem if your opinions differ.
** Fundamental tradeoffs                                              :slide:
You get:
- Managed: Provisioning, management and even patch updating are
  automated
- Compatible: Native access to Memached or Redis
- Scalability: add and remove nodes with FewClicks™
- Reliability: Automatic failure detection and recovery
- Great integration with AWS: metrics, security, notifications
** Fundamental tradeoffs (cont)                                       :slide:
You give up:

- Being anywhere but AWS
- Fine grained control of node failure recovery
- Fine-grained control of Redis backups, slaves of slaves in
  replication groups and having more than 5 slaves in a replication group.
- Preferred tooling for metrics and notifications around your caching
  engine.
- Unsupported versions of Redis or Memcached
** Alternatives                                                       :slide:
- [[http://redislabs.com/][RedisLabs]]
  - Memcached and Redis services
  - Scalability is defined by just memory size. No nodes,
    clusters or engine-specific configuration.
  - Different pricing tiers for more features i.e. replication, multiple
    A-Z, backups
  - Available on AWS, Azure, SoftLayer and GCE
  - Backups and imports: any of the previous environments or to an ftp
    server
** Alternatives (cont)                                                :slide:
- [[https://www.memcachier.com/][Memcachier]] - Memcached only. Similar to RedisLabs in simplicity.
- Redis only
  - [[http://redistogo.com/][Redis to Go]] - Limiting plans and features. Poor documentation.
    Early Heroku addon
  - [[http://www.redisgreen.net/][RedisGreen]] - Simple but with more features - provides dedicated
    machines, hourly backups and metrics dashboard
  - [[http://azure.microsoft.com/en-us/services/cache/][Microsoft Azure Redis Cache]] - Redis features somewhere between
    RedisLabs and ElastiCache

Recommendation: RedisLabs and Azure Redis Cache are worth investigating.
** Application characteristics                                        :slide:
- Environment: Hosted on AWS
- Docs: Excellent like most AWS documentation
- API quality:
  - Well done for a non-trivial API.
  - Each operation and its parameters [[http://docs.aws.amazon.com/AmazonElastiCache/latest/APIReference/Welcome.html][are documented]].
  - API versioning done by release date.
  - Standard SDKs: java, .NET, ruby, php, python
- Dependencies: Redis or Memcached and AWS infrastructure i.e. EC2, S3, CloudWatch
** Application characteristics (cont)                                 :slide:
- Community: Not much but enough for production concerns
  - [[https://forums.aws.amazon.com/forum.jspa?forumID=127][Support Forum]] - Actively monitored by Amazon employees
  - Not much in the wild: few results on GitHub, presentations mainly
    by Amazon.
- Longevity
  - Memcached since 2011 and Redis since 9/2013.
  - Marked as Beta
- Experience reports: TODO
** Operational characteristics                                        :slide:
** What does it cost?                                                 :slide:
- Billing is per hour per node ($0.022 to $1.207).
- Partial hours get rounded up.
- Billing starts when node is in 'Available' state.
- Reserved Cache Nodes
  - Pay up front for 1 or 3 years.
  - Three tiers - the more you pay upfront, the less you pay per hour.
** What does it cost? (cont)                                          :slide:
- Data transfer:
  - No charge to EC2 within same AZ
  - Charge on EC2 instance to another AZ. Charge is only EC2 instance
    end.
- Backup: Storage is $0.085/GB every month. Data transfer is no charge.
- For more, see [[https://aws.amazon.com/elasticache/pricing/][pricing page]]
* END

#+OPTIONS: num:nil toc:nil tags:t H:4

#+TAGS: slide(s)

#+HTML_HEAD_EXTRA: <link rel="stylesheet" type="text/css" href="common.css" />
#+HTML_HEAD_EXTRA: <link rel="stylesheet" type="text/css" href="screen.css" media="screen" />
#+HTML_HEAD_EXTRA: <link rel="stylesheet" type="text/css" href="projection.css" media="projection" />
#+HTML_HEAD_EXTRA: <link rel="stylesheet" type="text/css" href="presenter.css" media="presenter" />

#+BEGIN_HTML
<script type="text/javascript" src="org-html-slideshow.js"></script>
#+END_HTML

# Local Variables:
# org-html-head-include-default-style: nil
# org-html-head-include-scripts: nil
# buffer-file-coding-system: utf-8-unix
# End:
