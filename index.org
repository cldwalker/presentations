#+TITLE: AWS Elasticache
#+AUTHOR: Gabriel Horner
#+EMAIL: gabriel@cognitect.com

* AWS ElastiCache Briefing                                            :slide:
* Choosing to use
** What is it?                                                        :slide:
- Amazon ElastiCache is a web service that provides an
  in-memory cache for your AWS application.
- This cache is a scalable cluster of Memcached or Redis protocol-compliant
  server nodes.
- This service has a number of features to streamline the
  management, monitoring and operation of these nodes.
*** Notes                                                             :notes:

- Amazon ElastiCache is protocol-compliant with Memcached and Redis,
  so applications that already use another existing Memcached or Redis
  environment can work seamlessly with this service
** What problems does ElastiCache strive to solve?                    :slide:
- Problem 1: Building a caching cluster requires
  provisioning a server, installing caching software and knowledge of
  how to setup a cluster.
- Problem 2: Operating a caching cluster requires configuring it,
  understanding and mitigating its failure modes, updating software,
  backups (if possible) and more.
- Problem 3: Monitoring a caching cluster requires gathering a cluster's
  metrics and having a useful way of interpreting them.
- Problem 4: Automate all of the above to make a scalable, elastic
  and fault-tolerant cluster.
*** Notes                                                             :notes:
- p2: backups only for redis
- p2: configuring it is not a solved problem but hopefully one that
  starts out with more desirable defaults
- p3: i.e. a visual way perhaps a dashboard
- p3: you also need to understand how to take action on those metrics
- p4: fault-tolerant here means being able to lose a node and have one
  automatically take its place.
** Fundamental semantics
*** What is it 'about'?                                              :slide:
ElastiCache aims to be an easy way of adding a reliable, scalable and
managed caching layer to your AWS app.
TODO - preface with slideshare diagram
*** What are the primary operations?                                   :slide:
- Create, edit, reboot and delete cache clusters
- Create, edit, promote and delete Redis replication groups
- Create, edit, list and reset cache parameter groups
- Create, edit, assign/authorize and delete cache security groups and subnet groups
- Create, show, copy, delete and restore Redis snapshots
**** Notes                                                            :notes:
There's 34 actions in all
*** Is it simple?                                                    :slide:
Theoretically yes - it's just a FewClicksâ„¢ caching but ...
- There are a number of moving parts and even more operations
- Different node types can impact throughput, latency.
- Different configurations can impact reliability, durability, elasticity.
- Grouping Redis and Memcached works until it doesn't.

So /NO/
**** Notes                                                            :notes:
- configuration, node types and redis/memcached disconnect can make it hard to reason about
- redis and memcached have different concepts and features
- redis has replication and backup. memcached has auto-discovery.
- redis can be durable
** Architectural overview
*** Key components                                                    :slide:
- engine: Redis or Memcached
- node: Smallest building block with its own DNS name and port
- cluster: Group of nodes with the same engine type
- cache parameter group: Group of parameters to be associated with a
  cluster
- cache security group: Controls network access to public cluster
- cache subnet group: Controls network access to private cluster
- Redis replication group: One primary/write cluster and up to five read clusters
**** Notes                                                            :notes:
- node runs an instance of memcached/redis
- only one node per cluster 
*** Key components (continued)                                        :slide:
[[file:img/elasticache_components.png]]
*** Key features/functions                                            :slide:
- Run clusters of Memcached/Redis nodes
- Detailed monitoring statistics of nodes via Cloudwatch
- Failed nodes are automatically detected and replaced
- Auto discovery of Memcached nodes
*** Notes 
** Key indicators for use                                             :slide:
** Key indicators against use                                         :slide:
** Fundamental tradeoffs                                              :slide:
** What are some alternatives?                                        :slide:
** Application characteristics                                        :slide:
** Application characteristics (continued)                             :slide:
** Operational characteristics                                        :slide:
** What does it cost?                                                 :slide:
* END

#+OPTIONS: num:nil toc:nil tags:t H:4

#+TAGS: slide(s)

#+HTML_HEAD_EXTRA: <link rel="stylesheet" type="text/css" href="common.css" />
#+HTML_HEAD_EXTRA: <link rel="stylesheet" type="text/css" href="screen.css" media="screen" />
#+HTML_HEAD_EXTRA: <link rel="stylesheet" type="text/css" href="projection.css" media="projection" />
#+HTML_HEAD_EXTRA: <link rel="stylesheet" type="text/css" href="presenter.css" media="presenter" />

#+BEGIN_HTML
<script type="text/javascript" src="org-html-slideshow.js"></script>
#+END_HTML

# Local Variables:
# org-html-head-include-default-style: nil
# org-html-head-include-scripts: nil
# buffer-file-coding-system: utf-8-unix
# End:
